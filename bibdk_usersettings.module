<?php

/**
 * @file
 * Module file. Gives the the users ability to setup personal settings through the Openuser webservice
 *
 * The following methods can be used for CRUD actions:
 *  ding_provider_invoke('user', 'set_setting', $user_name, $settings_name, $settings_value );
 *  ding_provider_invoke('user', 'get_setting', $user_name, $settings_name);
 *  ding_provider_invoke('user', 'delete_setting', $user_name, $settings_name);

 */

/**
 * Implememts hook_user_profile_tabs (
 *
 * @see ding_user.module)
 * */
function bibdk_usersettings_user_profile2_tabs() {
  $ret = new stdClass();
  $ret->label = t('Settings');
  $ret->form = 'bibdk_usersettings_user_settings_form';
  $ret->type = 'bibdk_usersettings_user_settings';
  return $ret;
}


function bibdk_usersettings_theme(){
  return array('bibdk_usersettings_form' => array(
    'variables' => array('tabs' => array(), 'settings' => array()),
    'template' => 'theme/bibdk-usersettings-form',
    'render_element' => 'form',
  ));
}

/**
 * Form for user settings
 */
function bibdk_usersettings_user_settings_form($form, $form_state){

  $tabs = module_invoke_all('bibdk_usersettings_user_tabs');


  foreach($tabs as $key => $tab){
    if (!isset($firstelement)){
      $tabs[$key]['attributes']['class'] = array('active');
      $firstelement = true;
    }
    else
      $tabs[$key]['attributes'] = '';
  }



  $elements = module_invoke_all('bibdk_usersettings_user_settings');

  foreach($elements  as $element){

    // Create new tabs
    if (!isset($tab_elements[$element['#tab']])){
      $tab_elements[$element['#tab']] = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => $element['#tab'],
        ),
      );
    }

    // Add elements to tab
    $tab_elements[$element['#tab']] += $element;

    $tab_elements[$element['#tab']]['submit'] = array(
      '#type' => 'submit',
      '#value' => t('save_settings'),
      '#action' => 'bibdk_usersettings_user_settings_form_submit',
    );


  }

  $form['tabs'] = array(
    '#theme' => 'bibdk_usersettings_form',
    '#tabs' => $tabs,
    //'#settings' => $tab_elements
  );

  $form['elements'] = $tab_elements;
  $form['elements'] += array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'tabs-sections',
        'bibdk-usersettings',
        'clearfix',
      ),
    ),

  );


  return $form;

}

/** submit add/update all user settings
 * @param $form
 * @param $form_state
 */
function bibdk_usersettings_user_settings_form_submit($form, $form_state){
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    bibdk_usersettings_user_settings_set($key, $value);
  }

  drupal_set_message(t('bibdk_usersetting_has_been_updated'));
}

/** Wrapper to get user settings
 * @param $name
 * @param $default
 * @return mixed
 */
function bibdk_usersettings_user_settings_get($name, $default){
  global $user;

  if (!ding_user_is_provider_user($user)) {
    return $default;
  }
  try {
    $creds = ding_user_get_creds($user);
  }
  catch (Exception $e) {
    return $default;
  }

  if ($return = ding_provider_invoke('user', 'get_setting', $creds['name'], $name)){
    return _bibdk_usersettings_parse_response($return);
  }
  else
    return $default;

}

function _bibdk_usersettings_parse_response($response) {
  $dom = new DomDocument();
  if (!@$dom->loadXML($response)) {
    if (variable_get('bibdk_provider_enable_logging')) {
      watchdog('bibdk_cart', t('bibdk_usersettings could not load response: %xml', array('%xml' => var_export($response, TRUE))), array(), WATCHDOG_ERROR);
    }
    return null;
  }
  $xpath = new DomXPATH($dom);
  $xpath->registerNamespace('oui', 'http://oss.dbc.dk/ns/openuserinfo');
  if (!isset($xpath)) {
    return null;
  }
  // grap value
  $query = '//oui:settingString';
  $nodelist = $xpath->query($query);
  foreach($nodelist as $delta => $node){
    $return = $node->nodeValue;
  }

  return $return;

}


/** Wrapper to set user settings
 * @param $name
 * @param $value
 * @return null
 */
function bibdk_usersettings_user_settings_set($name, $value){
  global $user;

  if (!ding_user_is_provider_user($user)) {
    return false;
  }
  try {
    $creds = ding_user_get_creds($user);
  }
  catch (Exception $e) {
    return false;
  }

  ding_provider_invoke('user', 'set_setting', $creds['name'], $name, $value );


}
