<?php

/**
 * @file
 * Module file. Gives the the users ability to setup personal settings through the Openuser webservice
 */

/**
 * Implements hook_menu();
 * @return boolean
 */
function bibdk_usersettings_menu() {
    $items['usersettings'] = array(
    'title' => 'Usersettings',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('bibdk_usersettings_openuser_search'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Callback function for hook_menu bibdk_usersettings_menu
*/
function bibdk_usersettings_openuser_search( $form, $form_state) {
  $form = array();

  //Headline
  $form['test'] = array(
    '#markup' => t('ChooseYourSettings'),
  );
  
  //Checkbox 
  $form['sbSelfPickup'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Selfpickup at statsbiblioteket.'),
    '#default_value' => bibdk_usersettings_openuser_search_setup($form, $form_state),
  );
    
  //Submitbutton
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('setSelfPickup')
  );
    
  return $form;
}

function bibdk_usersettings_openuser_search_submit($form, $form_state) {
  global $user;
   
  $value = isset($form_state['values']['sbSelfPickup']) ? $form_state['values']['sbSelfPickup'] : NULL;
  $response = ding_provider_invoke('user', 'set_setting', $user->name, 'sbselfpickup', $value );
  
  //$response = ding_provider_invoke('user', 'get_setting', 'ana', 'sbselfpickup');
  //$response = ding_provider_invoke('user', 'delete_setting', 'ana', 'sbselfpickup');
  //dpm($response);
 return $response;
 
 }

 function bibdk_usersettings_openuser_search_setup($form, $form_state) {
   global $user;
   $dingresponse = ding_provider_invoke('user', 'get_setting', $user->name, 'sbselfpickup');
   $response = bibdk_usersettings_openuser_parse_userinfo($dingresponse);
   $resonsevalue = isset($response['oui:settingType']) ? $response['oui:settingString'] : FALSE;
   //dpm($resonsevalue);
   return $resonsevalue;
 }
 
 /**
 * @param $xml xml from request to openuserinfo 
 * @return array 
 */
function bibdk_usersettings_openuser_parse_userinfo($xml) {
  $xpath = bibdk_favourite_load_userinfo($xml);

  if (empty($xpath)) {
    return FALSE;
  }
  
  $query = '//oui:settingString';
  $nodelist = $xpath->query($query);
  
  // check if empty
  if (empty($nodelist)) {
    return array();
  }

  foreach ($nodelist as $node) {
    if (!empty($node->childNodes)) {
      foreach ($node->childNodes as $child) {
        $sbselfpickup[$child->nodeName] = $child->nodeValue;
      }
      if (!empty($sbselfpickup)) {
        $sbselfpickup[$sbselfpickup['oui:settingType']] = $sbselfpickup;
      }
    }

  }
  $resonsevalue = isset($sbselfpickup['oui:settingType']) ? $sbselfpickup : FALSE;
  return $resonsevalue;
}

function bibdk_favourite_load_userinfo($xml) {
  $dom = new DomDocument();
  if (!@$dom->loadXML($xml)) {
    if (variable_get('bibdk_provider_enable_logging')) {
      watchdog('bibdk_favourite', t('BIBDK favourite could not load response: %xml', array('%xml' => var_export($xml, TRUE))), array(), WATCHDOG_ERROR);
    }
    return array();
  }
  $xpath = new DomXPATH($dom);
  $xpath->registerNamespace('oui', 'http://oss.dbc.dk/ns/openuserinfo');
  return $xpath;
}